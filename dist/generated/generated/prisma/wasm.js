
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.1
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.1",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GoalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  description: 'description',
  complexity: 'complexity',
  suggestedWeeks: 'suggestedWeeks',
  chunking: 'chunking',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JourneyScalarFieldEnum = {
  id: 'id',
  goalId: 'goalId',
  title: 'title',
  startDate: 'startDate',
  endDate: 'endDate',
  meta: 'meta',
  createdAt: 'createdAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  journeyId: 'journeyId',
  title: 'title',
  description: 'description',
  orderIndex: 'orderIndex',
  startWeek: 'startWeek',
  endWeek: 'endWeek',
  estimatedHours: 'estimatedHours',
  progress: 'progress',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneDependencyScalarFieldEnum = {
  id: 'id',
  milestoneId: 'milestoneId',
  dependsOnId: 'dependsOnId',
  createdAt: 'createdAt'
};

exports.Prisma.SuggestionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  goalId: 'goalId',
  provider: 'provider',
  response: 'response',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.TutorSessionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  goalId: 'goalId',
  milestoneId: 'milestoneId',
  title: 'title',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TutorMessageScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  sender: 'sender',
  content: 'content',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.SessionSummaryScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  userId: 'userId',
  summaryText: 'summaryText',
  keyPoints: 'keyPoints',
  actionItems: 'actionItems',
  provider: 'provider',
  rawResponse: 'rawResponse',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CheckinScheduleScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  goalId: 'goalId',
  milestoneId: 'milestoneId',
  frequency: 'frequency',
  nextDueAt: 'nextDueAt',
  enabled: 'enabled',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CheckinEntryScalarFieldEnum = {
  id: 'id',
  scheduleId: 'scheduleId',
  userId: 'userId',
  goalId: 'goalId',
  milestoneId: 'milestoneId',
  completedAt: 'completedAt',
  answers: 'answers',
  notes: 'notes',
  progress: 'progress',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Goal: 'Goal',
  Journey: 'Journey',
  Milestone: 'Milestone',
  MilestoneDependency: 'MilestoneDependency',
  Suggestion: 'Suggestion',
  TutorSession: 'TutorSession',
  TutorMessage: 'TutorMessage',
  SessionSummary: 'SessionSummary',
  CheckinSchedule: 'CheckinSchedule',
  CheckinEntry: 'CheckinEntry'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/nikhil/programming/experiment-labs-assessment/backend/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/nikhil/programming/experiment-labs-assessment/backend/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.1",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  output        = \"../src/generated/prisma\"\n  binaryTargets = [\"native\", \"debian-openssl-3.0.x\"]\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id        String   @id @default(uuid()) @db.Uuid\n  name      String\n  email     String   @unique\n  password  String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  goals            Goal[]\n  suggestions      Suggestion[]\n  tutorSessions    TutorSession[]\n  sessionSummaries SessionSummary[]\n  CheckinSchedule  CheckinSchedule[]\n  CheckinEntry     CheckinEntry[]\n}\n\nmodel Goal {\n  id              String            @id @default(uuid()) @db.Uuid\n  userId          String            @db.Uuid\n  user            User              @relation(fields: [userId], references: [id])\n  title           String\n  description     String?\n  complexity      Int? // 1..10\n  suggestedWeeks  Int?\n  chunking        String? // \"weekly\"|\"biweekly\"\n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  journeys        Journey[]\n  suggestions     Suggestion[]\n  tutorSessions   TutorSession[]\n  CheckinSchedule CheckinSchedule[]\n  CheckinEntry    CheckinEntry[]\n\n  @@index([userId])\n  @@index([createdAt])\n}\n\nmodel Journey {\n  id         String      @id @default(uuid()) @db.Uuid\n  goalId     String      @db.Uuid\n  goal       Goal        @relation(fields: [goalId], references: [id])\n  title      String?\n  startDate  DateTime?\n  endDate    DateTime?\n  meta       Json?\n  createdAt  DateTime    @default(now())\n  milestones Milestone[]\n\n  @@index([goalId])\n  @@index([createdAt])\n}\n\nmodel Milestone {\n  id              String                @id @default(uuid()) @db.Uuid\n  journeyId       String                @db.Uuid\n  journey         Journey               @relation(fields: [journeyId], references: [id])\n  title           String\n  description     String?\n  orderIndex      Int\n  startWeek       Int?\n  endWeek         Int?\n  estimatedHours  Int?\n  progress        Int                   @default(0) // 0-100\n  metadata        Json?\n  createdAt       DateTime              @default(now())\n  updatedAt       DateTime              @updatedAt\n  dependencies    MilestoneDependency[] @relation(\"deps_from\")\n  requiredBy      MilestoneDependency[] @relation(\"deps_to\")\n  tutorSessions   TutorSession[]\n  CheckinSchedule CheckinSchedule[]\n  CheckinEntry    CheckinEntry[]\n\n  @@index([journeyId])\n  @@index([createdAt])\n}\n\nmodel MilestoneDependency {\n  id          String    @id @default(uuid()) @db.Uuid\n  milestoneId String    @db.Uuid\n  dependsOnId String    @db.Uuid\n  milestone   Milestone @relation(\"deps_from\", fields: [milestoneId], references: [id])\n  dependsOn   Milestone @relation(\"deps_to\", fields: [dependsOnId], references: [id])\n  createdAt   DateTime  @default(now())\n\n  @@index([milestoneId])\n  @@index([dependsOnId])\n}\n\nmodel Suggestion {\n  id        String    @id @default(uuid()) @db.Uuid\n  userId    String    @db.Uuid\n  goalId    String    @db.Uuid\n  user      User      @relation(fields: [userId], references: [id])\n  goal      Goal      @relation(fields: [goalId], references: [id])\n  provider  String // \"heuristic\"|\"openrouter\"|\"other\"\n  response  Json\n  createdAt DateTime  @default(now())\n  expiresAt DateTime?\n\n  @@index([userId])\n  @@index([goalId])\n  @@index([createdAt])\n}\n\n// Tutor session and message models for AI-assisted tutoring and chat history\nmodel TutorSession {\n  id          String          @id @default(uuid()) @db.Uuid\n  userId      String          @db.Uuid\n  user        User            @relation(fields: [userId], references: [id])\n  goalId      String?         @db.Uuid // optional: session tied to a goal\n  goal        Goal?           @relation(fields: [goalId], references: [id])\n  milestoneId String?         @db.Uuid // optional: tied to a milestone\n  milestone   Milestone?      @relation(fields: [milestoneId], references: [id])\n  title       String?\n  status      String          @default(\"open\") // open|closed\n  createdAt   DateTime        @default(now())\n  updatedAt   DateTime        @updatedAt\n  messages    TutorMessage[]\n  summary     SessionSummary?\n\n  @@index([userId])\n}\n\nmodel TutorMessage {\n  id        String       @id @default(uuid()) @db.Uuid\n  sessionId String       @db.Uuid\n  session   TutorSession @relation(fields: [sessionId], references: [id])\n  sender    String // \"user\" | \"assistant\" | \"system\"\n  content   String\n  metadata  Json? // e.g., { model: 'gpt-x', tokens: 123 }\n  createdAt DateTime     @default(now())\n\n  @@index([sessionId, createdAt])\n}\n\n// Summaries generated for a tutor session (LLM-produced or heuristic)\nmodel SessionSummary {\n  id          String       @id @default(uuid()) @db.Uuid\n  sessionId   String       @unique @db.Uuid\n  session     TutorSession @relation(fields: [sessionId], references: [id])\n  userId      String       @db.Uuid\n  user        User         @relation(fields: [userId], references: [id])\n  summaryText String\n  keyPoints   Json? // array of short bullet points\n  actionItems Json? // array of action items { text, due?: Date }\n  provider    String // 'openrouter'|'heuristic' etc.\n  rawResponse Json? // optional raw LLM response for auditing\n  createdAt   DateTime     @default(now())\n  updatedAt   DateTime     @updatedAt\n\n  @@index([userId, createdAt])\n}\n\n// Check-in scheduling and entries\nmodel CheckinSchedule {\n  id          String         @id @default(uuid()) @db.Uuid\n  userId      String         @db.Uuid\n  user        User           @relation(fields: [userId], references: [id])\n  goalId      String?        @db.Uuid // optional: schedule per-goal\n  goal        Goal?          @relation(fields: [goalId], references: [id])\n  milestoneId String?        @db.Uuid // optional: tie schedule to a milestone\n  milestone   Milestone?     @relation(fields: [milestoneId], references: [id])\n  frequency   String // 'daily'|'weekly'|'biweekly'\n  nextDueAt   DateTime?\n  enabled     Boolean        @default(true)\n  createdAt   DateTime       @default(now())\n  updatedAt   DateTime       @updatedAt\n  entries     CheckinEntry[]\n\n  @@index([userId])\n}\n\nmodel CheckinEntry {\n  id          String          @id @default(uuid()) @db.Uuid\n  scheduleId  String          @db.Uuid\n  schedule    CheckinSchedule @relation(fields: [scheduleId], references: [id])\n  userId      String          @db.Uuid\n  user        User            @relation(fields: [userId], references: [id])\n  goalId      String?         @db.Uuid // snapshot of which goal it was for\n  goal        Goal?           @relation(fields: [goalId], references: [id])\n  milestoneId String?         @db.Uuid // snapshot if tied to a milestone\n  milestone   Milestone?      @relation(fields: [milestoneId], references: [id])\n  completedAt DateTime        @default(now())\n  answers     Json?\n  notes       String?\n  progress    Int?\n  createdAt   DateTime        @default(now())\n\n  @@index([scheduleId, createdAt])\n}\n",
  "inlineSchemaHash": "b92f02a913e89604dacd47a25a2e3c224fed385031bcfd530cd9140c8ece14de",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"goals\",\"kind\":\"object\",\"type\":\"Goal\",\"relationName\":\"GoalToUser\"},{\"name\":\"suggestions\",\"kind\":\"object\",\"type\":\"Suggestion\",\"relationName\":\"SuggestionToUser\"},{\"name\":\"tutorSessions\",\"kind\":\"object\",\"type\":\"TutorSession\",\"relationName\":\"TutorSessionToUser\"},{\"name\":\"sessionSummaries\",\"kind\":\"object\",\"type\":\"SessionSummary\",\"relationName\":\"SessionSummaryToUser\"},{\"name\":\"CheckinSchedule\",\"kind\":\"object\",\"type\":\"CheckinSchedule\",\"relationName\":\"CheckinScheduleToUser\"},{\"name\":\"CheckinEntry\",\"kind\":\"object\",\"type\":\"CheckinEntry\",\"relationName\":\"CheckinEntryToUser\"}],\"dbName\":null},\"Goal\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"GoalToUser\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"complexity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"suggestedWeeks\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"chunking\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"journeys\",\"kind\":\"object\",\"type\":\"Journey\",\"relationName\":\"GoalToJourney\"},{\"name\":\"suggestions\",\"kind\":\"object\",\"type\":\"Suggestion\",\"relationName\":\"GoalToSuggestion\"},{\"name\":\"tutorSessions\",\"kind\":\"object\",\"type\":\"TutorSession\",\"relationName\":\"GoalToTutorSession\"},{\"name\":\"CheckinSchedule\",\"kind\":\"object\",\"type\":\"CheckinSchedule\",\"relationName\":\"CheckinScheduleToGoal\"},{\"name\":\"CheckinEntry\",\"kind\":\"object\",\"type\":\"CheckinEntry\",\"relationName\":\"CheckinEntryToGoal\"}],\"dbName\":null},\"Journey\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goal\",\"kind\":\"object\",\"type\":\"Goal\",\"relationName\":\"GoalToJourney\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"meta\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"milestones\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"JourneyToMilestone\"}],\"dbName\":null},\"Milestone\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"journeyId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"journey\",\"kind\":\"object\",\"type\":\"Journey\",\"relationName\":\"JourneyToMilestone\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startWeek\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"endWeek\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"estimatedHours\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"dependencies\",\"kind\":\"object\",\"type\":\"MilestoneDependency\",\"relationName\":\"deps_from\"},{\"name\":\"requiredBy\",\"kind\":\"object\",\"type\":\"MilestoneDependency\",\"relationName\":\"deps_to\"},{\"name\":\"tutorSessions\",\"kind\":\"object\",\"type\":\"TutorSession\",\"relationName\":\"MilestoneToTutorSession\"},{\"name\":\"CheckinSchedule\",\"kind\":\"object\",\"type\":\"CheckinSchedule\",\"relationName\":\"CheckinScheduleToMilestone\"},{\"name\":\"CheckinEntry\",\"kind\":\"object\",\"type\":\"CheckinEntry\",\"relationName\":\"CheckinEntryToMilestone\"}],\"dbName\":null},\"MilestoneDependency\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestoneId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dependsOnId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestone\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"deps_from\"},{\"name\":\"dependsOn\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"deps_to\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Suggestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SuggestionToUser\"},{\"name\":\"goal\",\"kind\":\"object\",\"type\":\"Goal\",\"relationName\":\"GoalToSuggestion\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"response\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"TutorSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TutorSessionToUser\"},{\"name\":\"goalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goal\",\"kind\":\"object\",\"type\":\"Goal\",\"relationName\":\"GoalToTutorSession\"},{\"name\":\"milestoneId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestone\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"MilestoneToTutorSession\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"messages\",\"kind\":\"object\",\"type\":\"TutorMessage\",\"relationName\":\"TutorMessageToTutorSession\"},{\"name\":\"summary\",\"kind\":\"object\",\"type\":\"SessionSummary\",\"relationName\":\"SessionSummaryToTutorSession\"}],\"dbName\":null},\"TutorMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"TutorSession\",\"relationName\":\"TutorMessageToTutorSession\"},{\"name\":\"sender\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"metadata\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"SessionSummary\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"TutorSession\",\"relationName\":\"SessionSummaryToTutorSession\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SessionSummaryToUser\"},{\"name\":\"summaryText\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"keyPoints\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"actionItems\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"rawResponse\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"CheckinSchedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CheckinScheduleToUser\"},{\"name\":\"goalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goal\",\"kind\":\"object\",\"type\":\"Goal\",\"relationName\":\"CheckinScheduleToGoal\"},{\"name\":\"milestoneId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestone\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"CheckinScheduleToMilestone\"},{\"name\":\"frequency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"nextDueAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"enabled\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"entries\",\"kind\":\"object\",\"type\":\"CheckinEntry\",\"relationName\":\"CheckinEntryToCheckinSchedule\"}],\"dbName\":null},\"CheckinEntry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule\",\"kind\":\"object\",\"type\":\"CheckinSchedule\",\"relationName\":\"CheckinEntryToCheckinSchedule\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"CheckinEntryToUser\"},{\"name\":\"goalId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"goal\",\"kind\":\"object\",\"type\":\"Goal\",\"relationName\":\"CheckinEntryToGoal\"},{\"name\":\"milestoneId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"milestone\",\"kind\":\"object\",\"type\":\"Milestone\",\"relationName\":\"CheckinEntryToMilestone\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"answers\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

